{
  "address": "0x626FA62be3B0587a5e73C2E84dACfD3361f62d01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sold",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymentTokenAddress",
          "type": "address"
        }
      ],
      "name": "NftMerketItemCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createItemForSaleForEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "createItemForSaleWithToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftItemId",
          "type": "uint256"
        }
      ],
      "name": "createMarketForSaleForEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftItemId",
          "type": "uint256"
        }
      ],
      "name": "createMarketForSaleForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUnsoldItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "paymentTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "marketingFeeTokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketPlace.NftMerketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyItemCreated",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "paymentTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "marketingFeeTokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketPlace.NftMerketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyNFTPurchased",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "paymentTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "marketingFeeTokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct NFTMarketPlace.NftMerketItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gettheMarketFeesForEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gettheMarketFeesForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6345cfbb68ba0e36b7d2add79eff36fcea63df99344dd61bcbde28106baf030",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x626FA62be3B0587a5e73C2E84dACfD3361f62d01",
    "transactionIndex": 4,
    "gasUsed": "1478766",
    "logsBloom": "0x
    "blockHash": "0x391edfe6cdf1c2f03af14c38c404a1515c5a53bab4d3fddc5b799c7b9b70816f",
    "transactionHash": "0xe6345cfbb68ba0e36b7d2add79eff36fcea63df99344dd61bcbde28106baf030",
    "logs": [],
    "blockNumber": 17510479,
    "cumulativeGasUsed": "6616691",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF637860c509e804C640C13c720d4150D5b3AC457"
  ],
  "numDeployments": 2,
  "solcInputHash": "fa944733b6c8c6572f47dced7d3405b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"NftMerketItemCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createItemForSaleForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"createItemForSaleWithToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftItemId\",\"type\":\"uint256\"}],\"name\":\"createMarketForSaleForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftItemId\",\"type\":\"uint256\"}],\"name\":\"createMarketForSaleForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUnsoldItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingFeeTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketPlace.NftMerketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyItemCreated\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingFeeTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketPlace.NftMerketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyNFTPurchased\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingFeeTokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketPlace.NftMerketItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettheMarketFeesForEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettheMarketFeesForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketPlace.sol\":\"NFTMarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract NFTMarketPlace is ReentrancyGuard {\\r\\n    uint256 marketFeesForEth = 0.010 ether;\\r\\n    uint256 marketFeesForToken = 10_000 * 10 ** 9; //10000 token\\r\\n    address payable owner;\\r\\n    address paymentTokenAddress;\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private itemId;\\r\\n    Counters.Counter private itemsSold;\\r\\n\\r\\n    constructor(address _paymentToken) {\\r\\n        owner = payable(msg.sender);\\r\\n        paymentTokenAddress = _paymentToken;\\r\\n    }\\r\\n\\r\\n    struct NftMerketItem {\\r\\n        address nftContract;\\r\\n        uint256 id;\\r\\n        uint256 tokenId;\\r\\n        address payable owner;\\r\\n        address payable seller;\\r\\n        uint256 price;\\r\\n        bool sold;\\r\\n        address paymentTokenAddress;\\r\\n        uint256 marketingFeeTokenAmount;\\r\\n    }\\r\\n\\r\\n    event NftMerketItemCreated(\\r\\n        address indexed nftContract,\\r\\n        uint256 indexed id,\\r\\n        uint256 tokenId,\\r\\n        address owner,\\r\\n        address seller,\\r\\n        uint256 price,\\r\\n        bool sold,\\r\\n        address indexed paymentTokenAddress\\r\\n    );\\r\\n\\r\\n    function gettheMarketFeesForEth() public view returns (uint256) {\\r\\n        return marketFeesForEth;\\r\\n    }\\r\\n\\r\\n    function gettheMarketFeesForToken() public view returns (uint256) {\\r\\n        return marketFeesForToken;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////////\\r\\n    mapping(uint256 => NftMerketItem) private idForMarketItem;\\r\\n\\r\\n    ///////////////////////////////////\\r\\n    function createItemForSaleForEth(\\r\\n        address nftContract,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    ) public payable nonReentrant {\\r\\n        require(price > 0, \\\"Price should be moreThan 1\\\");\\r\\n        require(tokenId > 0, \\\"token Id should be moreThan 1\\\");\\r\\n        require(msg.value == marketFeesForEth, \\\"The Market Fees is 0.010 Ether\\\");\\r\\n        require(nftContract != address(0), \\\"address should not be equal 0x0\\\");\\r\\n        itemId.increment();\\r\\n        uint256 id = itemId.current();\\r\\n\\r\\n        idForMarketItem[id] = NftMerketItem(\\r\\n            nftContract,\\r\\n            id,\\r\\n            tokenId,\\r\\n            payable(address(0)),\\r\\n            payable(msg.sender),\\r\\n            price,\\r\\n            false,\\r\\n            address(0),\\r\\n            0\\r\\n        );\\r\\n\\r\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\r\\n\\r\\n        emit NftMerketItemCreated(\\r\\n            nftContract,\\r\\n            id,\\r\\n            tokenId,\\r\\n            address(0),\\r\\n            msg.sender,\\r\\n            price,\\r\\n            false,\\r\\n            address(0)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createItemForSaleWithToken(\\r\\n        address nftContract,\\r\\n        uint256 tokenId,\\r\\n        uint256 price\\r\\n    ) public payable nonReentrant {\\r\\n        require(price > 0, \\\"Price should be moreThan 1\\\");\\r\\n        require(tokenId > 0, \\\"token Id should be moreThan 1\\\");\\r\\n        require(\\r\\n            IERC20(paymentTokenAddress).allowance(msg.sender, address(this)) >=\\r\\n                marketFeesForToken,\\r\\n            \\\"Not enought allowance\\\"\\r\\n        );\\r\\n        require(nftContract != address(0), \\\"address should not be equal 0x0\\\");\\r\\n        itemId.increment();\\r\\n        uint256 id = itemId.current();\\r\\n\\r\\n        uint256 currentTokenBalance = IERC20(paymentTokenAddress).balanceOf(address(this));\\r\\n\\r\\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\\r\\n        IERC20(paymentTokenAddress).transferFrom(msg.sender, address(this), marketFeesForToken);\\r\\n\\r\\n        uint256 marketingFeeTokenAmount = IERC20(paymentTokenAddress).balanceOf(address(this)) - currentTokenBalance;\\r\\n\\r\\n        idForMarketItem[id] = NftMerketItem(\\r\\n            nftContract,\\r\\n            id,\\r\\n            tokenId,\\r\\n            payable(address(0)),\\r\\n            payable(msg.sender),\\r\\n            price,\\r\\n            false,\\r\\n            paymentTokenAddress,\\r\\n            marketingFeeTokenAmount\\r\\n        );\\r\\n\\r\\n        emit NftMerketItemCreated(\\r\\n            nftContract,\\r\\n            id,\\r\\n            tokenId,\\r\\n            address(0),\\r\\n            msg.sender,\\r\\n            price,\\r\\n            false,\\r\\n            paymentTokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Create Maket\\r\\n\\r\\n    function createMarketForSaleForEth(address nftContract, uint256 nftItemId)\\r\\n        public\\r\\n        payable\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 price = idForMarketItem[nftItemId].price;\\r\\n        uint256 tokenId = idForMarketItem[nftItemId].tokenId;\\r\\n\\r\\n        require(msg.value == price, \\\"should buy the price of item\\\");\\r\\n        idForMarketItem[nftItemId].seller.transfer(msg.value);\\r\\n        IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId); //buy\\r\\n        idForMarketItem[nftItemId].owner = payable(msg.sender);\\r\\n        idForMarketItem[nftItemId].sold = true;\\r\\n        itemsSold.increment();\\r\\n        payable(owner).transfer(marketFeesForEth);\\r\\n    }\\r\\n\\r\\n      function createMarketForSaleForToken(address nftContract, uint256 nftItemId)\\r\\n        public\\r\\n        nonReentrant\\r\\n    {\\r\\n        uint256 price = idForMarketItem[nftItemId].price;\\r\\n        uint256 tokenId = idForMarketItem[nftItemId].tokenId;\\r\\n        require(\\r\\n            IERC20(paymentTokenAddress).allowance(msg.sender, address(this)) >=\\r\\n                price,\\r\\n            \\\"Not enought allowance\\\"\\r\\n        );\\r\\n        IERC20(paymentTokenAddress).transferFrom(msg.sender, idForMarketItem[nftItemId].seller, price);\\r\\n        IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId); //buy\\r\\n        idForMarketItem[nftItemId].owner = payable(msg.sender);\\r\\n        idForMarketItem[nftItemId].sold = true;\\r\\n        itemsSold.increment();\\r\\n        IERC20(paymentTokenAddress).transfer(owner, idForMarketItem[nftItemId].marketingFeeTokenAmount);\\r\\n    }\\r\\n\\r\\n    //My items => sold,not sold,buy\\r\\n\\r\\n    function getMyItemCreated() public view returns (NftMerketItem[] memory) {\\r\\n        uint256 totalItemCount = itemId.current();\\r\\n        uint256 myItemCount = 0; //10\\r\\n        uint256 myCurrentIndex = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n            if (idForMarketItem[i + 1].seller == msg.sender) {\\r\\n                myItemCount += 1;\\r\\n            }\\r\\n        }\\r\\n        NftMerketItem[] memory nftItems = new NftMerketItem[](myItemCount); //list[3]\\r\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n            if (idForMarketItem[i + 1].seller == msg.sender) {\\r\\n                //[1,2,3,4,5]\\r\\n                uint256 currentId = i + 1;\\r\\n                NftMerketItem storage currentItem = idForMarketItem[currentId];\\r\\n                nftItems[myCurrentIndex] = currentItem;\\r\\n                myCurrentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nftItems;\\r\\n    }\\r\\n\\r\\n    //Create My purchased Nft Item\\r\\n\\r\\n    function getMyNFTPurchased() public view returns (NftMerketItem[] memory) {\\r\\n        uint256 totalItemCount = itemId.current();\\r\\n        uint256 myItemCount = 0; //10\\r\\n        uint256 myCurrentIndex = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n            if (idForMarketItem[i + 1].owner == msg.sender) {\\r\\n                myItemCount += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        NftMerketItem[] memory nftItems = new NftMerketItem[](myItemCount); //list[3]\\r\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n            if (idForMarketItem[i + 1].owner == msg.sender) {\\r\\n                //[1,2,3,4,5]\\r\\n                uint256 currentId = i + 1;\\r\\n                NftMerketItem storage currentItem = idForMarketItem[currentId];\\r\\n                nftItems[myCurrentIndex] = currentItem;\\r\\n                myCurrentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nftItems;\\r\\n    }\\r\\n\\r\\n    //Fetch  all unsold nft items\\r\\n    function getAllUnsoldItems() public view returns (NftMerketItem[] memory) {\\r\\n        uint256 totalItemCount = itemId.current();\\r\\n        uint256 myItemCount = itemId.current() - itemsSold.current();\\r\\n        uint256 myCurrentIndex = 0;\\r\\n\\r\\n        NftMerketItem[] memory nftItems = new NftMerketItem[](myItemCount); //list[3]\\r\\n        for (uint256 i = 0; i < totalItemCount; i++) {\\r\\n            if (idForMarketItem[i + 1].owner == address(0)) {\\r\\n                //[1,2,3,4,5]\\r\\n                uint256 currentId = i + 1;\\r\\n                NftMerketItem storage currentItem = idForMarketItem[currentId];\\r\\n                nftItems[myCurrentIndex] = currentItem;\\r\\n                myCurrentIndex += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nftItems;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3c5a3cd6b85d7897a427ee89952331d67d40c3b0548d673a47af2263603520f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc100006001556509184e72a00060025534801561002557600080fd5b506040516118a43803806118a48339810160408190526100449161007c565b600160005560038054336001600160a01b031991821617909155600480549091166001600160a01b03929092169190911790556100ac565b60006020828403121561008e57600080fd5b81516001600160a01b03811681146100a557600080fd5b9392505050565b6117e9806100bb6000396000f3fe6080604052600436106100865760003560e01c806358d09f361161005957806358d09f36146101005780635d8e90ea1461011f578063782018f0146101345780639e31e65514610147578063febda3c81461015c57600080fd5b80630196b30d1461008b57806325135cbf146100ad57806336db1b4a146100d8578063446269e6146100eb575b600080fd5b34801561009757600080fd5b506100ab6100a6366004611581565b61016f565b005b3480156100b957600080fd5b506100c2610439565b6040516100cf91906115ab565b60405180910390f35b6100ab6100e6366004611657565b6105de565b3480156100f757600080fd5b506100c2610bd1565b34801561010c57600080fd5b506002545b6040519081526020016100cf565b34801561012b57600080fd5b50600154610111565b6100ab610142366004611581565b610db4565b34801561015357600080fd5b506100c2610f67565b6100ab61016a366004611657565b61114a565b6002600054141561019b5760405162461bcd60e51b81526004016101929061168a565b60405180910390fd5b6002600081815582815260076020526040908190206005810154920154600480549251636eb1769f60e11b81523391810191909152306024820152909183916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa15801561020c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023091906116c1565b10156102765760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567687420616c6c6f77616e636560581b6044820152606401610192565b600480546000858152600760205260409081902083015490516323b872dd60e01b81526001600160a01b03928316936323b872dd936102bc9333939116918891016116da565b6020604051808303816000875af11580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff91906116fe565b506040516323b872dd60e01b81526001600160a01b038516906323b872dd90610330903090339086906004016116da565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b50505060008481526007602052604090206003810180546001600160a01b031916331790556006908101805460ff191660011790556103a1915080546001019055565b600480546003546000868152600760208190526040918290200154905163a9059cbb60e01b81526001600160a01b03928316948101949094526024840152169063a9059cbb906044016020604051808303816000875af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d91906116fe565b50506001600055505050565b6060600061044660055490565b9050600061045360065490565b600554610460919061173d565b90506000808267ffffffffffffffff81111561047e5761047e611754565b6040519080825280602002602001820160405280156104b757816020015b6104a4611519565b81526020019060019003908161049c5790505b50905060005b848110156105d55760006007816104d584600161176a565b81526020810191909152604001600020600301546001600160a01b031614156105c357600061050582600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e085015291820154908301528551929350918590879081106105a8576105a8611782565b60209081029190910101526105be60018661176a565b945050505b806105cd81611798565b9150506104bd565b50949350505050565b600260005414156106015760405162461bcd60e51b81526004016101929061168a565b6002600055806106535760405162461bcd60e51b815260206004820152601a60248201527f50726963652073686f756c64206265206d6f72655468616e20310000000000006044820152606401610192565b600082116106a35760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e2049642073686f756c64206265206d6f72655468616e20310000006044820152606401610192565b60025460048054604051636eb1769f60e11b815233928101929092523060248301526001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071991906116c1565b101561075f5760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567687420616c6c6f77616e636560581b6044820152606401610192565b6001600160a01b0383166107b55760405162461bcd60e51b815260206004820152601f60248201527f616464726573732073686f756c64206e6f7420626520657175616c20307830006044820152606401610192565b6107c3600580546001019055565b60006107ce60055490565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084191906116c1565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd90610874903390309089906004016116da565b600060405180830381600087803b15801561088e57600080fd5b505af11580156108a2573d6000803e3d6000fd5b5050600480546002546040516323b872dd60e01b81526001600160a01b0390921694506323b872dd93506108db923392309291016116da565b6020604051808303816000875af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906116fe565b50600480546040516370a0823160e01b8152309281019290925260009183916001600160a01b0316906370a0823190602401602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099191906116c1565b61099b919061173d565b9050604051806101200160405280876001600160a01b0316815260200184815260200186815260200160006001600160a01b03168152602001336001600160a01b03168152602001858152602001600015158152602001600460009054906101000a90046001600160a01b03166001600160a01b03168152602001828152506007600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070155905050600460009054906101000a90046001600160a01b03166001600160a01b031683876001600160a01b03167fddd70a5dfeb399368282e730ab6b89301c656d83cb00833aa2196edff81b9bcb886000338a6000604051610bbc9594939291909485526001600160a01b03938416602086015291909216604084015260608301919091521515608082015260a00190565b60405180910390a45050600160005550505050565b60606000610bde60055490565b905060008060005b83811015610c41573360076000610bfe84600161176a565b81526020810191909152604001600020600301546001600160a01b03161415610c2f57610c2c60018461176a565b92505b80610c3981611798565b915050610be6565b5060008267ffffffffffffffff811115610c5d57610c5d611754565b604051908082528060200260200182016040528015610c9657816020015b610c83611519565b815260200190600190039081610c7b5790505b50905060005b848110156105d5573360076000610cb484600161176a565b81526020810191909152604001600020600301546001600160a01b03161415610da2576000610ce482600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e08501529182015490830152855192935091859087908110610d8757610d87611782565b6020908102919091010152610d9d60018661176a565b945050505b80610dac81611798565b915050610c9c565b60026000541415610dd75760405162461bcd60e51b81526004016101929061168a565b600260008181558281526007602052604090206005810154910154348214610e415760405162461bcd60e51b815260206004820152601c60248201527f73686f756c642062757920746865207072696365206f66206974656d000000006044820152606401610192565b6000838152600760205260408082206004015490516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610e89573d6000803e3d6000fd5b506040516323b872dd60e01b81526001600160a01b038516906323b872dd90610eba903090339086906004016116da565b600060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b50505060008481526007602052604090206003810180546001600160a01b031916331790556006908101805460ff19166001179055610f2b915080546001019055565b6003546001546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561042d573d6000803e3d6000fd5b60606000610f7460055490565b905060008060005b83811015610fd7573360076000610f9484600161176a565b81526020810191909152604001600020600401546001600160a01b03161415610fc557610fc260018461176a565b92505b80610fcf81611798565b915050610f7c565b5060008267ffffffffffffffff811115610ff357610ff3611754565b60405190808252806020026020018201604052801561102c57816020015b611019611519565b8152602001906001900390816110115790505b50905060005b848110156105d557336007600061104a84600161176a565b81526020810191909152604001600020600401546001600160a01b0316141561113857600061107a82600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e0850152918201549083015285519293509185908790811061111d5761111d611782565b602090810291909101015261113360018661176a565b945050505b8061114281611798565b915050611032565b6002600054141561116d5760405162461bcd60e51b81526004016101929061168a565b6002600055806111bf5760405162461bcd60e51b815260206004820152601a60248201527f50726963652073686f756c64206265206d6f72655468616e20310000000000006044820152606401610192565b6000821161120f5760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e2049642073686f756c64206265206d6f72655468616e20310000006044820152606401610192565b60015434146112605760405162461bcd60e51b815260206004820152601e60248201527f546865204d61726b6574204665657320697320302e30313020457468657200006044820152606401610192565b6001600160a01b0383166112b65760405162461bcd60e51b815260206004820152601f60248201527f616464726573732073686f756c64206e6f7420626520657175616c20307830006044820152606401610192565b6112c4600580546001019055565b60006112cf60055490565b9050604051806101200160405280856001600160a01b0316815260200182815260200184815260200160006001600160a01b03168152602001336001600160a01b0316815260200183815260200160001515815260200160006001600160a01b0316815260200160008152506007600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070155905050836001600160a01b03166323b872dd3330866040518463ffffffff1660e01b815260040161147e939291906116da565b600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b5050604080518681526000602082018190523382840152606082018790526080820181905291519193508492506001600160a01b038816917fddd70a5dfeb399368282e730ab6b89301c656d83cb00833aa2196edff81b9bcb9181900360a00190a4505060016000555050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80356001600160a01b038116811461157c57600080fd5b919050565b6000806040838503121561159457600080fd5b61159d83611565565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561164a57815180516001600160a01b0390811686528782015188870152868201518787015260608083015182169087015260808083015182169087015260a0808301519087015260c08083015115159087015260e08083015190911690860152610100908101519085015261012090930192908501906001016115c8565b5091979650505050505050565b60008060006060848603121561166c57600080fd5b61167584611565565b95602085013595506040909401359392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156116d357600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561171057600080fd5b8151801515811461172057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561174f5761174f611727565b500390565b634e487b7160e01b600052604160045260246000fd5b6000821982111561177d5761177d611727565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156117ac576117ac611727565b506001019056fea2646970667358221220470eab39d05e79034b7fb11aa241baa146eb21edd1bddc0324d1828029351b0164736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806358d09f361161005957806358d09f36146101005780635d8e90ea1461011f578063782018f0146101345780639e31e65514610147578063febda3c81461015c57600080fd5b80630196b30d1461008b57806325135cbf146100ad57806336db1b4a146100d8578063446269e6146100eb575b600080fd5b34801561009757600080fd5b506100ab6100a6366004611581565b61016f565b005b3480156100b957600080fd5b506100c2610439565b6040516100cf91906115ab565b60405180910390f35b6100ab6100e6366004611657565b6105de565b3480156100f757600080fd5b506100c2610bd1565b34801561010c57600080fd5b506002545b6040519081526020016100cf565b34801561012b57600080fd5b50600154610111565b6100ab610142366004611581565b610db4565b34801561015357600080fd5b506100c2610f67565b6100ab61016a366004611657565b61114a565b6002600054141561019b5760405162461bcd60e51b81526004016101929061168a565b60405180910390fd5b6002600081815582815260076020526040908190206005810154920154600480549251636eb1769f60e11b81523391810191909152306024820152909183916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa15801561020c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023091906116c1565b10156102765760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567687420616c6c6f77616e636560581b6044820152606401610192565b600480546000858152600760205260409081902083015490516323b872dd60e01b81526001600160a01b03928316936323b872dd936102bc9333939116918891016116da565b6020604051808303816000875af11580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff91906116fe565b506040516323b872dd60e01b81526001600160a01b038516906323b872dd90610330903090339086906004016116da565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b50505060008481526007602052604090206003810180546001600160a01b031916331790556006908101805460ff191660011790556103a1915080546001019055565b600480546003546000868152600760208190526040918290200154905163a9059cbb60e01b81526001600160a01b03928316948101949094526024840152169063a9059cbb906044016020604051808303816000875af1158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d91906116fe565b50506001600055505050565b6060600061044660055490565b9050600061045360065490565b600554610460919061173d565b90506000808267ffffffffffffffff81111561047e5761047e611754565b6040519080825280602002602001820160405280156104b757816020015b6104a4611519565b81526020019060019003908161049c5790505b50905060005b848110156105d55760006007816104d584600161176a565b81526020810191909152604001600020600301546001600160a01b031614156105c357600061050582600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e085015291820154908301528551929350918590879081106105a8576105a8611782565b60209081029190910101526105be60018661176a565b945050505b806105cd81611798565b9150506104bd565b50949350505050565b600260005414156106015760405162461bcd60e51b81526004016101929061168a565b6002600055806106535760405162461bcd60e51b815260206004820152601a60248201527f50726963652073686f756c64206265206d6f72655468616e20310000000000006044820152606401610192565b600082116106a35760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e2049642073686f756c64206265206d6f72655468616e20310000006044820152606401610192565b60025460048054604051636eb1769f60e11b815233928101929092523060248301526001600160a01b03169063dd62ed3e90604401602060405180830381865afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071991906116c1565b101561075f5760405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567687420616c6c6f77616e636560581b6044820152606401610192565b6001600160a01b0383166107b55760405162461bcd60e51b815260206004820152601f60248201527f616464726573732073686f756c64206e6f7420626520657175616c20307830006044820152606401610192565b6107c3600580546001019055565b60006107ce60055490565b600480546040516370a0823160e01b815230928101929092529192506000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561081d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084191906116c1565b6040516323b872dd60e01b81529091506001600160a01b038616906323b872dd90610874903390309089906004016116da565b600060405180830381600087803b15801561088e57600080fd5b505af11580156108a2573d6000803e3d6000fd5b5050600480546002546040516323b872dd60e01b81526001600160a01b0390921694506323b872dd93506108db923392309291016116da565b6020604051808303816000875af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e91906116fe565b50600480546040516370a0823160e01b8152309281019290925260009183916001600160a01b0316906370a0823190602401602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099191906116c1565b61099b919061173d565b9050604051806101200160405280876001600160a01b0316815260200184815260200186815260200160006001600160a01b03168152602001336001600160a01b03168152602001858152602001600015158152602001600460009054906101000a90046001600160a01b03166001600160a01b03168152602001828152506007600085815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070155905050600460009054906101000a90046001600160a01b03166001600160a01b031683876001600160a01b03167fddd70a5dfeb399368282e730ab6b89301c656d83cb00833aa2196edff81b9bcb886000338a6000604051610bbc9594939291909485526001600160a01b03938416602086015291909216604084015260608301919091521515608082015260a00190565b60405180910390a45050600160005550505050565b60606000610bde60055490565b905060008060005b83811015610c41573360076000610bfe84600161176a565b81526020810191909152604001600020600301546001600160a01b03161415610c2f57610c2c60018461176a565b92505b80610c3981611798565b915050610be6565b5060008267ffffffffffffffff811115610c5d57610c5d611754565b604051908082528060200260200182016040528015610c9657816020015b610c83611519565b815260200190600190039081610c7b5790505b50905060005b848110156105d5573360076000610cb484600161176a565b81526020810191909152604001600020600301546001600160a01b03161415610da2576000610ce482600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e08501529182015490830152855192935091859087908110610d8757610d87611782565b6020908102919091010152610d9d60018661176a565b945050505b80610dac81611798565b915050610c9c565b60026000541415610dd75760405162461bcd60e51b81526004016101929061168a565b600260008181558281526007602052604090206005810154910154348214610e415760405162461bcd60e51b815260206004820152601c60248201527f73686f756c642062757920746865207072696365206f66206974656d000000006044820152606401610192565b6000838152600760205260408082206004015490516001600160a01b03909116913480156108fc02929091818181858888f19350505050158015610e89573d6000803e3d6000fd5b506040516323b872dd60e01b81526001600160a01b038516906323b872dd90610eba903090339086906004016116da565b600060405180830381600087803b158015610ed457600080fd5b505af1158015610ee8573d6000803e3d6000fd5b50505060008481526007602052604090206003810180546001600160a01b031916331790556006908101805460ff19166001179055610f2b915080546001019055565b6003546001546040516001600160a01b039092169181156108fc0291906000818181858888f1935050505015801561042d573d6000803e3d6000fd5b60606000610f7460055490565b905060008060005b83811015610fd7573360076000610f9484600161176a565b81526020810191909152604001600020600401546001600160a01b03161415610fc557610fc260018461176a565b92505b80610fcf81611798565b915050610f7c565b5060008267ffffffffffffffff811115610ff357610ff3611754565b60405190808252806020026020018201604052801561102c57816020015b611019611519565b8152602001906001900390816110115790505b50905060005b848110156105d557336007600061104a84600161176a565b81526020810191909152604001600020600401546001600160a01b0316141561113857600061107a82600161176a565b60008181526007602081815260409283902083516101208101855281546001600160a01b039081168252600183015493820193909352600282015494810194909452600381015482166060850152600481015482166080850152600581015460a0850152600681015460ff8116151560c08601526101009081900490921660e0850152918201549083015285519293509185908790811061111d5761111d611782565b602090810291909101015261113360018661176a565b945050505b8061114281611798565b915050611032565b6002600054141561116d5760405162461bcd60e51b81526004016101929061168a565b6002600055806111bf5760405162461bcd60e51b815260206004820152601a60248201527f50726963652073686f756c64206265206d6f72655468616e20310000000000006044820152606401610192565b6000821161120f5760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e2049642073686f756c64206265206d6f72655468616e20310000006044820152606401610192565b60015434146112605760405162461bcd60e51b815260206004820152601e60248201527f546865204d61726b6574204665657320697320302e30313020457468657200006044820152606401610192565b6001600160a01b0383166112b65760405162461bcd60e51b815260206004820152601f60248201527f616464726573732073686f756c64206e6f7420626520657175616c20307830006044820152606401610192565b6112c4600580546001019055565b60006112cf60055490565b9050604051806101200160405280856001600160a01b0316815260200182815260200184815260200160006001600160a01b03168152602001336001600160a01b0316815260200183815260200160001515815260200160006001600160a01b0316815260200160008152506007600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002015560608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555060e08201518160060160016101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070155905050836001600160a01b03166323b872dd3330866040518463ffffffff1660e01b815260040161147e939291906116da565b600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b5050604080518681526000602082018190523382840152606082018790526080820181905291519193508492506001600160a01b038816917fddd70a5dfeb399368282e730ab6b89301c656d83cb00833aa2196edff81b9bcb9181900360a00190a4505060016000555050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80356001600160a01b038116811461157c57600080fd5b919050565b6000806040838503121561159457600080fd5b61159d83611565565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561164a57815180516001600160a01b0390811686528782015188870152868201518787015260608083015182169087015260808083015182169087015260a0808301519087015260c08083015115159087015260e08083015190911690860152610100908101519085015261012090930192908501906001016115c8565b5091979650505050505050565b60008060006060848603121561166c57600080fd5b61167584611565565b95602085013595506040909401359392505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156116d357600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561171057600080fd5b8151801515811461172057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561174f5761174f611727565b500390565b634e487b7160e01b600052604160045260246000fd5b6000821982111561177d5761177d611727565b500190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156117ac576117ac611727565b506001019056fea2646970667358221220470eab39d05e79034b7fb11aa241baa146eb21edd1bddc0324d1828029351b0164736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2359,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "marketFeesForEth",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2366,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "marketFeesForToken",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2368,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 2370,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "paymentTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2377,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "itemId",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)1964_storage"
      },
      {
        "astId": 2380,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "itemsSold",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)1964_storage"
      },
      {
        "astId": 2456,
        "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
        "label": "idForMarketItem",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(NftMerketItem)2417_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(NftMerketItem)2417_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketPlace.NftMerketItem)",
        "numberOfBytes": "32",
        "value": "t_struct(NftMerketItem)2417_storage"
      },
      "t_struct(Counter)1964_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1963,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NftMerketItem)2417_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketPlace.NftMerketItem",
        "members": [
          {
            "astId": 2400,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "nftContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2402,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2404,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2406,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          },
          {
            "astId": 2408,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 2410,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2412,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "sold",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 2414,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "paymentTokenAddress",
            "offset": 1,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2416,
            "contract": "contracts/NFTMarketPlace.sol:NFTMarketPlace",
            "label": "marketingFeeTokenAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}